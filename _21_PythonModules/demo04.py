# -*- coding: UTF-8 -*-
# author: chenyongjun

'''
Python3 模块
    一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。
    当我们使用import语句的时候，Python解释器是怎样找到对应的文件的呢？
    这就涉及到Python的搜索路径，搜索路径是由一系列目录名组成的，Python解释器就依次从这些目录中去寻找所引入的模块。
    这看起来很像环境变量，事实上，也可以通过定义环境变量的方式来确定搜索路径。
    搜索路径是在Python编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在sys模块中的path变量

    sys.path 输出是一个列表，其中第一项是空串''，代表当前目录（若是从一个脚本中打印出来的话，可以更清楚地看出是哪个目录），
    亦即我们执行python解释器的目录（对于脚本的话就是运行的脚本所在的目录）。
    因此若像我一样在当前目录下存在与要引入模块同名的文件，就会把要引入的模块屏蔽掉。
    了解了搜索路径的概念，就可以在脚本中修改sys.path来引入一些不在搜索路径中的模块。
'''
import _18_PythonModules.tool.fibonacci as fibo

if __name__ == "__main__":
    fibo.fib(1000)
    print(fibo.fib2(100))

    # 如果你打算经常使用一个函数，你可以把它赋给一个本地的名称
    fib1 = fibo.fib
    fib2 = fibo.fib2
    fib1(1000)
    print(fib2(100))
